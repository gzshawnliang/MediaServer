@page
@model IndexModel
@{
    ViewData["Title"] = "首页";
}
@*<div>@Model.StreamId</div>*@

@foreach(Tuple<string,string> videoStream in Model.VideoStreamList)
{
    <div class="card" style="margin-bottom:8px">
        <div class="card-header">
            <div class="d-flex w-100 justify-content-between">
                <span>@videoStream.Item2</span>
                <button id="refresh-@videoStream.Item1" type="button" class="btn btn-link btn-sm"><i class="bi bi-arrow-repeat"></i></button>
            </div>
            
            </div>
        <video  id="@videoStream.Item1"
                class="card-img" 
                style="width:100%;height:auto"
                muted
                controls="controls" autoplay="autoplay"
                x-webkit-airplay="true" x5-video-player-fullscreen="true"
                preload="auto" playsinline="true" webkit-playsinline
                x5-video-player-typ="h5">
            @*<source type="application/x-mpegURL" src="hls/test1.m3u8">*@
        </video>        
    </div>
}


<script>
    function sleep(milliseconds) {
      const date = Date.now();
      let currentDate = null;
      do {
        currentDate = Date.now();
      } while (currentDate - date < milliseconds);
    };

    var hlsDict = new Array();

    function addVideoSrc(video,videoSrc,id)
    {
        //var video = document.getElementById("video1");
        //
        // First check for native browser HLS support
        //
        if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = videoSrc;
        //
        // If no native HLS support, check if HLS.js is supported
        //
        } else if (Hls.isSupported()) {
            var hls = new Hls();
            video.muted = true;
            //video.autoplay = false;
            hls.loadSource(videoSrc);
            hls.attachMedia(video);
            hlsDict[id]=hls;
        }
    };

    var ids = [];
    @foreach (var videoStream in Model.VideoStreamList)
    {
         @:ids.push("@videoStream.Item1");
    }

    ids.forEach(function (item, index) {
      console.log(item, index);
        var video = document.getElementById(item);
        var videoSrc = '@Model.M3u8FileDir/'+ item + '/index.m3u8';
        addVideoSrc(video,videoSrc,item);

        var refreshButton = document.getElementById('refresh-'+item);
            refreshButton.onclick = function() {
                video.src="";
                if(hlsDict.hasOwnProperty("item")){
                    hlsDict[item].destroy();
                }
                sleep(500);
                addVideoSrc(video,videoSrc);
        };
        
        //todo:播放错误处理，hls不可用时候重新刷新
        //https://github.com/video-dev/hls.js/blob/master/docs/API.md#fifth-step-error-handling
        //video.addEventListener('error', function() {
        //    console.log('Failed to fetch data, but trying.');
        //});
    });
</script>

